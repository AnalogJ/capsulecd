version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5

executors:
  docker-in-docker:
    docker:
    - image: docker:17.06.1-ce-git
    environment:
      GOROOT: /usr/lib/go
      GOPATH: ~/go
    working_directory: ~/go/src/github.com/analogj/capsulecd

jobs:
  ######################################################################################################################
  # Parallel Steps - Engine Testing & Coverage
  ######################################################################################################################
  chef:
    executor: docker-in-docker
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Build & Run Chef Docker containers with coverage
          command: |
            docker build --pull	-f ci/Dockerfile --build-arg engine_type=chef --tag capsulecd-ci:chef .
            docker run -e "CI=true" --name chef capsulecd-ci:chef chef
            docker cp chef:/coverage/coverage-chef.txt .
          when: always
      - store_artifacts:
          path: coverage-chef.txt
          destination: coverage
      - persist_to_workspace:
          root: .
          paths:
            - '*.txt'


  golang:
    executor: docker-in-docker
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Build & Run Golang Docker containers with coverage
          command: |
            docker build --pull	-f ci/Dockerfile --build-arg engine_type=golang --tag capsulecd-ci:golang .
            docker run -e "CI=true" --name golang capsulecd-ci:golang golang
            docker cp golang:/coverage/coverage-golang.txt .
          when: always
      - store_artifacts:
          path: coverage-golang.txt
          destination: coverage
      - persist_to_workspace:
          root: .
          paths:
            - '*.txt'

  node:
    executor: docker-in-docker
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Build & Run Node Docker containers with coverage
          command: |
            docker build --pull	-f ci/Dockerfile --build-arg engine_type=node --tag capsulecd-ci:node .
            docker run -e "CI=true" --name node capsulecd-ci:node node
            docker cp node:/coverage/coverage-node.txt .
          when: always
      - store_artifacts:
          path: coverage-node.txt
          destination: coverage
      - persist_to_workspace:
          root: .
          paths:
            - '*.txt'


  python:
    executor: docker-in-docker
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Build & Run Python Docker containers with coverage
          command: |
            docker build --pull	-f ci/Dockerfile --build-arg engine_type=python --tag capsulecd-ci:python .
            docker run -e "CI=true" --name python capsulecd-ci:python python
            docker cp python:/coverage/coverage-python.txt .
          when: always
      - store_artifacts:
          path: coverage-python.txt
          destination: coverage
      - persist_to_workspace:
          root: .
          paths:
            - '*.txt'


  ruby:
    executor: docker-in-docker
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Build & Run Ruby Docker containers with coverage
          command: |
            docker build --pull	-f ci/Dockerfile --build-arg engine_type=ruby --tag capsulecd-ci:ruby .
            docker run -e "CI=true" --name ruby capsulecd-ci:ruby ruby
            docker cp ruby:/coverage/coverage-ruby.txt .
          when: always
      - store_artifacts:
          path: coverage-ruby.txt
          destination: coverage
      - persist_to_workspace:
          root: .
          paths:
            - '*.txt'


  coverage:
    machine:
      image: circleci/classic:latest
    working_directory: ~/coverage
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Merge coverage reports and submit
          command: |
            ls -alt ~/coverage

            # upload to codecov.
            cat ~/coverage/*.txt >> ~/coverage/merged.txt
          when: always
      - codecov/upload:
          file: ~/coverage/merged.txt

# build capsulecd every week, to ensure that language/dependency breaking changes are caught early.
# https://crontab.guru/every-week
#workflows:
#  version: 2
#  nightly:
#    triggers:
#      - schedule:
#          cron: "0 0 * * 0"
#          filters:
#            branches:
#              only:
#              - master
#    jobs:
#      - build


workflows:
  version: 2
  build:
    jobs:
      - chef
      - golang
      - node
      - python
      - ruby
      - coverage:
          requires:
            - chef
            - golang
            - node
            - python
            - ruby
  weekly:
    triggers:
      - schedule:
          #https://crontab.guru/#0_0_*_*_2
          cron: "0 0 * * 2"
          filters:
            branches:
              only:
              - master
    jobs:
      - chef
      - golang
      - node
      - python
      - ruby
