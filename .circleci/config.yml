version: 2
jobs:
  build:
    working_directory: /go/src/github.com/analogj/capsulecd
    docker:
      - image: docker:17.06.1-ce-git
        environment:
          GOROOT: /usr/lib/go
          GOPATH: /go
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.05.0-ce
      - run:
          name: Install dependencies
          command: |
            env
            docker info
            apk --update-cache --allow-untrusted \
                add go build-base bash curl \
                && rm -rf /var/cache/apk/*

            mkdir -p /coverage

            # Configure Go
            mkdir -p ${GOPATH}/src ${GOPATH}/bin

            docker pull analogj/libgit2-crossbuild:linux-amd64
# Use docker image caching if this is slow.
# https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
      - run:
          name: Build application Docker image
          command: |
            docker build -f ci/Dockerfile.base --tag analogj/capsulecd-ci:base .
            docker build -f ci/Dockerfile.chef --tag analogj/capsulecd-ci:chef .
            docker build -f ci/Dockerfile.node --tag analogj/capsulecd-ci:node .
            docker build -f ci/Dockerfile.python --tag analogj/capsulecd-ci:python .
            docker build -f ci/Dockerfile.ruby --tag analogj/capsulecd-ci:ruby .
            docker build -f ci/Dockerfile.golang --tag analogj/capsulecd-ci:golang .
      - run:
          name: Run Base Docker containers with coverage
          command: |
            CAPSULECD_ENV=base
            echo "#################################################### $CAPSULECD_ENV"
            docker run -e "CI=true" \
              --name $CAPSULECD_ENV \
              analogj/capsulecd-ci:$CAPSULECD_ENV \
              ./ci/test-coverage.sh $CAPSULECD_ENV

            docker cp $CAPSULECD_ENV:/coverage/coverage-$CAPSULECD_ENV.txt /coverage
          when: always
      - run:
          name: Run Chef Docker containers with coverage
          command: |
            CAPSULECD_ENV=chef
            echo "#################################################### $CAPSULECD_ENV"
            docker run -e "CI=true" \
              --name $CAPSULECD_ENV \
              analogj/capsulecd-ci:$CAPSULECD_ENV \
              ./ci/test-coverage.sh $CAPSULECD_ENV

            docker cp $CAPSULECD_ENV:/coverage/coverage-$CAPSULECD_ENV.txt /coverage
          when: always
      - run:
          name: Run Node Docker containers with coverage
          command: |
            CAPSULECD_ENV=node
            echo "#################################################### $CAPSULECD_ENV"
            docker run -e "CI=true" \
              --name $CAPSULECD_ENV \
              analogj/capsulecd-ci:$CAPSULECD_ENV \
              ./ci/test-coverage.sh $CAPSULECD_ENV

            docker cp $CAPSULECD_ENV:/coverage/coverage-$CAPSULECD_ENV.txt /coverage
          when: always
      - run:
          name: Run Python Docker containers with coverage
          command: |
            CAPSULECD_ENV=python
            echo "#################################################### $CAPSULECD_ENV"
            docker run -e "CI=true" \
              --name $CAPSULECD_ENV \
              analogj/capsulecd-ci:$CAPSULECD_ENV \
              ./ci/test-coverage.sh $CAPSULECD_ENV

            docker cp $CAPSULECD_ENV:/coverage/coverage-$CAPSULECD_ENV.txt /coverage
          when: always
      - run:
          name: Run Ruby Docker containers with coverage
          command: |
            CAPSULECD_ENV=ruby
            echo "#################################################### $CAPSULECD_ENV"
            docker run -e "CI=true" \
              --name $CAPSULECD_ENV \
              analogj/capsulecd-ci:$CAPSULECD_ENV \
              ./ci/test-coverage.sh $CAPSULECD_ENV

            docker cp $CAPSULECD_ENV:/coverage/coverage-$CAPSULECD_ENV.txt /coverage
          when: always
      - run:
          name: Run Golang Docker containers with coverage
          command: |
            CAPSULECD_ENV=golang
            echo "#################################################### $CAPSULECD_ENV"
            docker run -e "CI=true" \
              --name $CAPSULECD_ENV \
              analogj/capsulecd-ci:$CAPSULECD_ENV \
              ./ci/test-coverage.sh $CAPSULECD_ENV

            docker cp $CAPSULECD_ENV:/coverage/coverage-$CAPSULECD_ENV.txt /coverage
          when: always
      - store_artifacts:
          path: /coverage
          destination: coverage

#      - run:
#          name: Merge coverage reports and submit
#          command: |
#            ls -alt /coverage
#
#            # upload to codecov.
#            bash <(curl -s https://codecov.io/bash) -f "*.txt" -s /coverage
#          when: always


# build capsulecd every week, to ensure that language/dependency breaking changes are caught early.
# https://crontab.guru/every-week
#workflows:
#  version: 2
#  nightly:
#    triggers:
#      - schedule:
#          cron: "0 0 * * 0"
#          filters:
#            branches:
#              only:
#              - master
#    jobs:
#      - build
