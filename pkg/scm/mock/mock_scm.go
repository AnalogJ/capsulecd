// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scm/interface.go

// Package mock_scm is a generated GoMock package.
package mock_scm

import (
	config "github.com/analogj/capsulecd/pkg/config"
	pipeline "github.com/analogj/capsulecd/pkg/pipeline"
	scm "github.com/analogj/capsulecd/pkg/scm"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockInterface) Init(pipelineData *pipeline.Data, config config.Interface, client *http.Client) error {
	ret := m.ctrl.Call(m, "Init", pipelineData, config, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockInterfaceMockRecorder) Init(pipelineData, config, client interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInterface)(nil).Init), pipelineData, config, client)
}

// RetrievePayload mocks base method
func (m *MockInterface) RetrievePayload() (*scm.Payload, error) {
	ret := m.ctrl.Call(m, "RetrievePayload")
	ret0, _ := ret[0].(*scm.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePayload indicates an expected call of RetrievePayload
func (mr *MockInterfaceMockRecorder) RetrievePayload() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePayload", reflect.TypeOf((*MockInterface)(nil).RetrievePayload))
}

// CheckoutPushPayload mocks base method
func (m *MockInterface) CheckoutPushPayload(payload *scm.Payload) error {
	ret := m.ctrl.Call(m, "CheckoutPushPayload", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutPushPayload indicates an expected call of CheckoutPushPayload
func (mr *MockInterfaceMockRecorder) CheckoutPushPayload(payload interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutPushPayload", reflect.TypeOf((*MockInterface)(nil).CheckoutPushPayload), payload)
}

// CheckoutPullRequestPayload mocks base method
func (m *MockInterface) CheckoutPullRequestPayload(payload *scm.Payload) error {
	ret := m.ctrl.Call(m, "CheckoutPullRequestPayload", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutPullRequestPayload indicates an expected call of CheckoutPullRequestPayload
func (mr *MockInterfaceMockRecorder) CheckoutPullRequestPayload(payload interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutPullRequestPayload", reflect.TypeOf((*MockInterface)(nil).CheckoutPullRequestPayload), payload)
}

// Publish mocks base method
func (m *MockInterface) Publish() error {
	ret := m.ctrl.Call(m, "Publish")
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockInterfaceMockRecorder) Publish() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockInterface)(nil).Publish))
}

// PublishAssets mocks base method
func (m *MockInterface) PublishAssets(releaseData interface{}) error {
	ret := m.ctrl.Call(m, "PublishAssets", releaseData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishAssets indicates an expected call of PublishAssets
func (mr *MockInterfaceMockRecorder) PublishAssets(releaseData interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAssets", reflect.TypeOf((*MockInterface)(nil).PublishAssets), releaseData)
}

// Cleanup mocks base method
func (m *MockInterface) Cleanup() error {
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockInterfaceMockRecorder) Cleanup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockInterface)(nil).Cleanup))
}

// Notify mocks base method
func (m *MockInterface) Notify(ref, state, message string) error {
	ret := m.ctrl.Call(m, "Notify", ref, state, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify
func (mr *MockInterfaceMockRecorder) Notify(ref, state, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockInterface)(nil).Notify), ref, state, message)
}
