// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scm/interface.go

package mock_scm

import (
	config "capsulecd/pkg/config"
	pipeline "capsulecd/pkg/pipeline"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	"capsulecd/pkg/scm"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return _m.recorder
}

// Init mocks base method
func (_m *MockInterface) Init(pipelineData *pipeline.Data, config config.Interface, client *http.Client) error {
	ret := _m.ctrl.Call(_m, "Init", pipelineData, config, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (_mr *MockInterfaceMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0, arg1, arg2)
}

// RetrievePayload mocks base method
func (_m *MockInterface) RetrievePayload() (*scm.Payload, error) {
	ret := _m.ctrl.Call(_m, "RetrievePayload")
	ret0, _ := ret[0].(*scm.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePayload indicates an expected call of RetrievePayload
func (_mr *MockInterfaceMockRecorder) RetrievePayload() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RetrievePayload")
}

// CheckoutPushPayload mocks base method
func (_m *MockInterface) CheckoutPushPayload(payload *scm.Payload) error {
	ret := _m.ctrl.Call(_m, "CheckoutPushPayload", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutPushPayload indicates an expected call of CheckoutPushPayload
func (_mr *MockInterfaceMockRecorder) CheckoutPushPayload(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckoutPushPayload", arg0)
}

// CheckoutPullRequestPayload mocks base method
func (_m *MockInterface) CheckoutPullRequestPayload(payload *scm.Payload) error {
	ret := _m.ctrl.Call(_m, "CheckoutPullRequestPayload", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutPullRequestPayload indicates an expected call of CheckoutPullRequestPayload
func (_mr *MockInterfaceMockRecorder) CheckoutPullRequestPayload(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckoutPullRequestPayload", arg0)
}

// Publish mocks base method
func (_m *MockInterface) Publish() error {
	ret := _m.ctrl.Call(_m, "Publish")
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (_mr *MockInterfaceMockRecorder) Publish() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish")
}

// Notify mocks base method
func (_m *MockInterface) Notify(ref string, state string, message string) error {
	ret := _m.ctrl.Call(_m, "Notify", ref, state, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify
func (_mr *MockInterfaceMockRecorder) Notify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1, arg2)
}
