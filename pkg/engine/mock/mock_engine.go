// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/engine/interface.go

package mock_engine

import (
	config "capsulecd/pkg/config"
	pipeline "capsulecd/pkg/pipeline"
	scm "capsulecd/pkg/scm"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return _m.recorder
}

// Init mocks base method
func (_m *MockInterface) Init(pipelineData *pipeline.Data, config config.Interface, sourceScm scm.Interface) error {
	ret := _m.ctrl.Call(_m, "Init", pipelineData, config, sourceScm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (_mr *MockInterfaceMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0, arg1, arg2)
}

// ValidateTools mocks base method
func (_m *MockInterface) ValidateTools() error {
	ret := _m.ctrl.Call(_m, "ValidateTools")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTools indicates an expected call of ValidateTools
func (_mr *MockInterfaceMockRecorder) ValidateTools() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateTools")
}

// AssembleStep mocks base method
func (_m *MockInterface) AssembleStep() error {
	ret := _m.ctrl.Call(_m, "AssembleStep")
	ret0, _ := ret[0].(error)
	return ret0
}

// AssembleStep indicates an expected call of AssembleStep
func (_mr *MockInterfaceMockRecorder) AssembleStep() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssembleStep")
}

// DependenciesStep mocks base method
func (_m *MockInterface) DependenciesStep() error {
	ret := _m.ctrl.Call(_m, "DependenciesStep")
	ret0, _ := ret[0].(error)
	return ret0
}

// DependenciesStep indicates an expected call of DependenciesStep
func (_mr *MockInterfaceMockRecorder) DependenciesStep() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DependenciesStep")
}

// TestStep mocks base method
func (_m *MockInterface) TestStep() error {
	ret := _m.ctrl.Call(_m, "TestStep")
	ret0, _ := ret[0].(error)
	return ret0
}

// TestStep indicates an expected call of TestStep
func (_mr *MockInterfaceMockRecorder) TestStep() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestStep")
}

// PackageStep mocks base method
func (_m *MockInterface) PackageStep() error {
	ret := _m.ctrl.Call(_m, "PackageStep")
	ret0, _ := ret[0].(error)
	return ret0
}

// PackageStep indicates an expected call of PackageStep
func (_mr *MockInterfaceMockRecorder) PackageStep() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PackageStep")
}

// DistStep mocks base method
func (_m *MockInterface) DistStep() error {
	ret := _m.ctrl.Call(_m, "DistStep")
	ret0, _ := ret[0].(error)
	return ret0
}

// DistStep indicates an expected call of DistStep
func (_mr *MockInterfaceMockRecorder) DistStep() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DistStep")
}
